<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
	xsi:schemaLocation="http://mybatis.org/schema/mybatis-spring 
						http://mybatis.org/schema/mybatis-spring.xsd
						http://www.springframework.org/schema/beans 
						https://www.springframework.org/schema/beans/spring-beans.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<context:component-scan base-package="org.zerock.diSample"></context:component-scan>

	<!-- Connection Pool - HikariCP 설정 -->
	<bean id="hikariConfig" class="com.zaxxer.hikari.HikariConfig">
	
		<!-- 일반설정
		<property name="driverClassName" value="oracle.jdbc.driver.OracleDriver" />
		<property name="jdbcUrl" value="jdbc:oracle:thin:@localhost:1521:orcl" />
		-->
		
		<!-- log4jdbc.log4j2 를 이용한 방법 -->
		<property name="driverClassName" value="net.sf.log4jdbc.sql.jdbcapi.DriverSpy" />
		<property name="jdbcUrl" value="jdbc:log4jdbc:oracle:thin:@localhost:1521:orcl" />		
		<property name="username" value="book_ex" />
		<property name="password" value="book_ex" />
	</bean>	
	
	<!-- HikariCP configuration -->
	<bean id="dataSource" class="com.zaxxer.hikari.HikariDataSource" destroy-method="close">
		<constructor-arg ref="hikariConfig" />
	</bean>
	
	<!-- myBatis HikcariCP 연결 -->
	 <bean id="SqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	 	<property name="dataSource" ref="dataSource" />
	 </bean>
	 
	 <!-- XML mapper가 아닌 mapper interface를 사용. 
	      myBatis Annotation을 찾아서 처리.
	 -->
	 <mybatis-spring:scan base-package="org.zerock.mapper"/>
	 
	 
	 <!-- MVC구조처럼 DAO에서 mapper xml을 이용할려면 sqlSession을 이용해야 한다. 
	 	  myBatis-spring jar에서 제공하는 SqlSessionTemplate는 MyBatis의 SqlSession인터페이스를 구현한 클래스로 기본적인 트랜잭션의 관리나 쓰레드 처리의 안정성 등을 보장해 주고, 
	 	  데이터베이스의 연결과 종료를 책임진다.
	
	 <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
	 	<constructor-arg name="sqlSessionFactory" ref="SqlSessionFactory" />
	 </bean>
	  -->
			
</beans>
